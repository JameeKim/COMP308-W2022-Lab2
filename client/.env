# Disable ESLint plugin for react-scripts and rely on the editor integration
#
# - Short explanation:
# The editor ESLint integration and the ESLint plugin in react-scripts will
# take turns yelling at you to fix the eslintrc. There is no way you can satisfy
# both at the same time.
#
# - Long explanation:
# The list of things that led to this situation is:
# 1. I'm using typescript
# 2. with `baseUrl` compiler option to avoid import paths like "../../*"
# 3. while having the `client` package as a child workspace in npm workspaces
# 4. with ESLint, especially the eslint-plugin-import
# 5. that requires eslint-import-resolver-typescript (due to #1 & #2)
# 5. which in turn requires a setting in the eslintrc:
#    "settings" -> "import/resolver" -> "typescript" -> "project"
# 6. all of this while having the eslintrc file for the `client` package sitting
#    at the root directory of the `client` package, not the project root
# Running ESLint in the editor at the project root directory requires the path
# to be relative to the project root directory (`client/tsconfig.json`).
# However, react-scripts requires the value to be relative to the `client`
# package directory (`./tsconfig.json` or `tsconfig.json`). I've tried putting
# both since it's an array anyways, but running react-scripts still refuses to
# correctly resolve the imports.
DISABLE_ESLINT_PLUGIN=true
